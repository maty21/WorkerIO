{"name":"Worker.IO","tagline":"Messaging pub/sub api for web workers includes Parallel libary ","body":"# WorkerIO\r\n___________________________________\r\n## Messaging pub/sub api for web workers includes Parallel libary   \r\n\r\n### New: **Parallel functionality**  - with an ability to send job and split it to sub workers More details below\r\n### The new parallel libary including those features:\r\n- [x] **pub/sub -** send and get messages from the job during proccessing\r\n- [x] **waitAny -** get a notification on the caller side when a sub worker finish its job with the result of the job.\r\n- [x] **WaitAll -** get a notification on the caller side when a the whole job is finshed includes the result of the job\r\n- [x] **broadcasting -** broadcasting message to the whole wrokers \r\n- [x] **cancelAll -** close the workers \r\n- [ ] **limiting worker numbers**- (in the next few days) an ability to limit the number of workers that will handle the job\r\n\r\nMore details below under the user instructions section\r\n    \r\n\r\n### Usage instructions:\r\n### worker:\r\n* create a worker on a separated  file\r\n* import workerIO  lib to your worker  using ```importScripts()```  then\r\n\r\n* init workerIO ```var yourWorkerName =  IO.Worker();```\r\n*  call to start method you should recive your socket instance for communicating with the caller side\r\n\r\n```javascript\r\n    yourWorkerName.start(function(socket){  \r\n                            \\\\body   ....    });\r\n ```\r\n*  within the ```start``` function you can recive messages by calling to ``on`` function\r\n\r\n```javascript\r\n    socket.on(\"messageName\",callbackFunction(Data))\r\n```\r\n\r\n*  sending messages using ```emit``` function  ```socket.emit(\"messageName\",\"Data\")```\r\n* full worker sample code\r\n\r\n```javascript\r\n\\\\\"testWorker.js\" file\r\nfunction Worker() {\r\n  importScripts('../dist/WorkerIO.js');\r\n  var testWorker = IO.Worker();\r\n  testWorker.start(function(socket){\r\n    socket.on(\"emitTest\",function(data){\r\n      console.log(data);\r\n\r\n    })\r\n    socket.emit(\"test\",\"bla\")\r\n  })\r\n  Worker();\r\n```\r\n\r\n### caller:\r\n*  init workerIO caller ```var yourCallerName =  IO.Reciver(\"testWorker.js\");```\r\n*   start processing the job by calling to ```start``` function\r\n  ```javascript\r\n      yourCallerName.start(function(socket){\r\n                            ...      })\r\n  ```\r\n*  within the ```start``` function you can recive messages by calling to ``on`` function\r\n        ```javascript\r\n          socket.on(\"messageName\",callbackFunction(Data))\r\n          ```\r\n\r\n*  sending messages using ```emit``` function\r\n   ```javascript  socket.emit(\"messageName\",\"Data\") ```\r\n\r\n* full caller sample code\r\n\r\n\r\n```javascript\r\n var io= IO.Reciver(\"testWorker.js\");\r\n  io.start(function(socket){\r\n    socket.on(\"test\",function(data){\r\n      console.log(\"on: \"+data);\r\n      socket.emit(\"emitTest\",\"bla\");\r\n    });\r\n    socket.emit(\"emitTest\",\"bla\");\r\n  });\r\n```  \r\n### parallel:\r\n* init parallel job is done using  ```var parallel= IO.Parallel(\"workerUnit.js\");```\r\n* in order to start a new job you should use  \r\n\r\n```javascript \r\nparallel.foreach([array of jobs...],function(socket,data){\r\n      //communicating with a specific worker\r\n      socket.emit(\"runParallel\",data);\r\n      socket.on(\"status\",function(data){\r\n        console.log(\"status: \"+data);\r\n      })\r\n```\r\n* then you can register to the following events\r\n    * on waitAny callback you will get the workerName and the result of the worker  \r\n    * on waitAll callback you will get the results from all the workers  \r\n\r\n```javascript \r\nparallel.waitAny(function(workerName,data){\r\n    //getting message when each  worker finish its job\r\n    console.log(\"WaitAny: data was procced on: \"+workerName+\" with result \"+data);\r\n  }).waitAll(function(data){\r\n    //getting message when all the job finsh their job\r\n    console.log(\"WaitAll: data was procced with result \"+data);\r\n  })\r\n ```\r\n * sending brodacast meesage to all of the workers is done using ```parallel.broadcast.emit(\"messageTopic\",data)```\r\n * you can also cancel to job during proccessing by using cancelAll ```parallel.cancelAll();```\r\n \r\n## full parallel example\r\n\r\n### caller:\r\n\r\n```javascript\r\n  //imitJob\r\n  var parallel= IO.Parallel(\"workerUnit.js\");\r\n  //Setting  Job and creating wrokers\r\n  parallel.foreach([1,2,3,4,5,6,7,8],function(socket,data){\r\n      //communicating with a specific worker\r\n      socket.emit(\"runParallel\",data);\r\n      socket.on(\"status\",function(data){\r\n        console.log(\"status: \"+data);\r\n      })\r\n  }).waitAny(function(workerName,data){\r\n    //getting message when each  worker finish its job\r\n    console.log(\"WaitAny: data was procced on: \"+workerName+\" with result \"+data);\r\n  }).waitAll(function(data){\r\n    //getting message when all the job finsh their job\r\n    console.log(\"WaitAll: data was procced with result \"+data);\r\n  });\r\n  setTimeout(function(){\r\n    //brodcasting message to the workers\r\n    parallel.broadcast.emit(\"broadcasting\",\":)\")\r\n  }, 6000);\r\n\r\n  function stopJob() {\r\n    //removing all the jobs\r\n    parallel.cancelAll();\r\n  }\r\n```\r\n### worker:\r\n\r\n```javascript\r\nfunction parallelTest() {\r\n  importScripts('../../dist/WorkerIO.js');\r\n  var inter= null ;\r\n  var testWorker = IO.Worker();\r\n  testWorker.start(function(socket){\r\n    socket.on(\"runParallel\",function(data){\r\n      console.log(\"runParallel: \"+data);\r\n      calc_data(data);\r\n    }).on(\"broadcasting\",function(data){\r\n      console.log(\"broadcasting: \"+data);\r\n      });\r\n\r\n    setInterval(function () {\r\n      socket.emit(\"status\",\"!!!Not finished yet\")\r\n    },5000);\r\n    function calc_data(data) {\r\n      inter =  setInterval(function(){\r\n           var calcData = data*5\r\n           socket.returnResult(calcData);\r\n        }, data*1000);\r\n\r\n    }\r\n  })\r\n}\r\nparallelTest();\r\n```\r\n","google":"UA-57647503-2","note":"Don't delete this file! It's used internally to help with page regeneration."}